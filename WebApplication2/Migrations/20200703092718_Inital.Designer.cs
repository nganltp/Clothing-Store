// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.Data;

namespace WebApplication2.Migrations
{
    [DbContext(typeof(ShopDatabaseContext))]
    [Migration("20200703092718_Inital")]
    partial class Inital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication2.Models.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("customer");

                    b.Property<string>("detail");

                    b.Property<bool>("isDefaultAddress");

                    b.Property<bool>("isHomeAddress");

                    b.Property<string>("phone");

                    b.HasKey("id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("WebApplication2.Models.Admin", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address");

                    b.Property<DateTime>("birth");

                    b.Property<DateTime>("closed");

                    b.Property<DateTime>("created");

                    b.Property<string>("email");

                    b.Property<string>("fullName");

                    b.Property<bool>("gender");

                    b.Property<string>("password");

                    b.Property<string>("role");

                    b.Property<string>("type");

                    b.Property<string>("username");

                    b.HasKey("id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("WebApplication2.Models.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("account");

                    b.Property<string>("content");

                    b.Property<DateTime>("created");

                    b.Property<int>("product");

                    b.Property<int>("stars");

                    b.Property<string>("title");

                    b.HasKey("id");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("WebApplication2.Models.Customer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("birth");

                    b.Property<DateTime>("closed");

                    b.Property<DateTime>("created");

                    b.Property<string>("email");

                    b.Property<string>("fullName");

                    b.Property<bool>("gender");

                    b.Property<string>("password");

                    b.Property<string>("type");

                    b.Property<string>("username");

                    b.HasKey("id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("WebApplication2.Models.Image", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("content");

                    b.Property<DateTime>("created");

                    b.Property<string>("format");

                    b.Property<int>("whose");

                    b.HasKey("id");

                    b.ToTable("Image");

                    b.HasData(
                        new
                        {
                            id = 1,
                            content = "https://dynamic.zacdn.com/zvk_pURuBf0qebzA1ki7tOeAFQ0=/fit-in/762x1100/filters:quality(95):fill(ffffff)/http://static.ph.zalora.net/p/forcast-3385-1064121-1.jpg",
                            created = new DateTime(2020, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            format = "jpg",
                            whose = 1001
                        },
                        new
                        {
                            id = 2,
                            content = "https://dynamic.zacdn.com/kPyjMLscmoN9zhFOFlNZmKzhEqE=/fit-in/762x1100/filters:quality(95):fill(ffffff)/http://static.ph.zalora.net/p/zalora-basics-7289-908288-1.jpg",
                            created = new DateTime(2020, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            format = "jpg",
                            whose = 1002
                        },
                        new
                        {
                            id = 3,
                            content = "https://dynamic.zacdn.com/PXAZe_2vxNQm5-Gwklv1XXB1BZA=/fit-in/762x1100/filters:quality(95):fill(ffffff)/http://static.ph.zalora.net/p/zalora-5887-342268-1.jpg",
                            created = new DateTime(2020, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            format = "jpg",
                            whose = 1003
                        },
                        new
                        {
                            id = 4,
                            content = "https://dynamic.zacdn.com/fVn7okqR8Fv_aPBqGArtyykeP1g=/fit-in/762x1100/filters:quality(95):fill(ffffff)/http://static.ph.zalora.net/p/r-a-f-by-plains-prints-0623-4461951-2.jpg",
                            created = new DateTime(2020, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            format = "jpg",
                            whose = 1004
                        },
                        new
                        {
                            id = 5,
                            content = "https://dynamic.zacdn.com/svO5p4CWSaTfAvwr7_8RJUdpBp4=/fit-in/762x1100/filters:quality(95):fill(ffffff)/http://static.ph.zalora.net/p/dorothy-perkins-3322-636078-2.jpg",
                            created = new DateTime(2020, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            format = "jpg",
                            whose = 1005
                        },
                        new
                        {
                            id = 6,
                            content = "https://dynamic.zacdn.com/Gn_53BkdgO_0agFVlmTo_wFrQiQ=/fit-in/762x1100/filters:quality(95):fill(ffffff)/http://static.ph.zalora.net/p/zalora-9164-5696121-2.jpg",
                            created = new DateTime(2020, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            format = "jpg",
                            whose = 1006
                        },
                        new
                        {
                            id = 7,
                            content = "https://dynamic.zacdn.com/GE730BaW3zNJRovgiUEpUyyGGGo=/fit-in/762x1100/filters:quality(95):fill(ffffff)/http://static.ph.zalora.net/p/zalora-0075-138559-1.jpg",
                            created = new DateTime(2020, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            format = "jpg",
                            whose = 1007
                        },
                        new
                        {
                            id = 8,
                            content = "https://dynamic.zacdn.com/GSDNBe3hVxb-pygRjSFnKS2qa7Y=/fit-in/762x1100/filters:quality(95):fill(ffffff)/http://static.ph.zalora.net/p/cole-vintage-4379-5930361-1.jpg",
                            created = new DateTime(2020, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            format = "jpg",
                            whose = 1008
                        },
                        new
                        {
                            id = 9,
                            content = "https://dynamic.zacdn.com/O0Dk13WyWc8YVbOAzrq9wFxJf54=/fit-in/762x1100/filters:quality(95):fill(ffffff)/http://static.ph.zalora.net/p/wallis-8725-031539-1.jpg",
                            created = new DateTime(2020, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            format = "jpg",
                            whose = 1009
                        },
                        new
                        {
                            id = 10,
                            content = "https://dynamic.zacdn.com/iVq4A_CjMo3tbUTJPyvTHTv7QFg=/fit-in/762x1100/filters:quality(95):fill(ffffff)/http://static.ph.zalora.net/p/bardot-9307-5647951-2.jpg",
                            created = new DateTime(2020, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            format = "jpg",
                            whose = 1010
                        });
                });

            modelBuilder.Entity("WebApplication2.Models.Item", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cart");

                    b.Property<int>("order");

                    b.Property<int>("price");

                    b.Property<int>("product");

                    b.Property<int>("quantity");

                    b.HasKey("id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("WebApplication2.Models.News", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("admin");

                    b.Property<string>("content");

                    b.Property<DateTime>("created");

                    b.Property<string>("type");

                    b.HasKey("id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("WebApplication2.Models.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address");

                    b.Property<int>("customer");

                    b.Property<DateTime>("ordered");

                    b.Property<int>("promotion");

                    b.Property<string>("status");

                    b.Property<int>("total");

                    b.HasKey("id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("WebApplication2.Models.Payment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("method");

                    b.Property<string>("note");

                    b.Property<int>("order");

                    b.Property<DateTime>("paid");

                    b.Property<int>("payer");

                    b.HasKey("id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("WebApplication2.Models.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("category");

                    b.Property<string>("description");

                    b.Property<string>("name");

                    b.Property<int>("price");

                    b.Property<string>("summary");

                    b.Property<string>("supplier");

                    b.HasKey("id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            id = 1,
                            category = "dress_a lined",
                            description = "Lined, Round neckline, Regular fit, Front button and back zip fastening",
                            name = "Karsyn A-Line Dress",
                            price = 5049,
                            summary = "SOLD BY ZALORA",
                            supplier = "FORCAST"
                        },
                        new
                        {
                            id = 2,
                            category = "dress_shift",
                            description = "Raglan sleeve shift dress, Round neckline, Unlined, Relaxed fit, Polyblend",
                            name = "Essential Raglan Sleeve Shift Dress",
                            price = 749,
                            summary = "SOLD BY ZALORA",
                            supplier = "ZALORA BASICS"
                        },
                        new
                        {
                            id = 3,
                            category = "dress_wrap",
                            description = "Monochrome textured mini wrap dress, Lined, V neckline, Relaxed fit, Concealed back zip fastening, Front pleat detail",
                            name = "Wrap Front Dress",
                            price = 489,
                            summary = "SOLD BY ZALORA",
                            supplier = "ZALORA"
                        },
                        new
                        {
                            id = 4,
                            category = "dress_maxi",
                            description = "Floral print tie strap midi dress,  Sweetheart neckline, Self-tie straps,  Shirred back panel, Square back, Casual",
                            name = "RAF Vinea Sleeveless Dress",
                            price = 3298,
                            summary = "SOLD BY ZALORA",
                            supplier = "R.A.F. by Plains & Prints"
                        },
                        new
                        {
                            id = 5,
                            category = "dress_shift",
                            description = "Lace shift dress with bell sleeves, Lined, Fits true to size, take your usual size, Bateau neckline, Short sleeves, Back zipper fastening",
                            name = "Shimmer Lace Shift Dress",
                            price = 2795,
                            summary = "SOLD BY ZALORA",
                            supplier = "Dorothy Perkins"
                        },
                        new
                        {
                            id = 6,
                            category = "dress_a lined",
                            description = "Sleeveless plain mini dress, Unlined, V neckline,  Regular fit, Zip fastening, Polyblend",
                            name = "Notches Detailed A-Line Dress",
                            price = 479,
                            summary = "SOLD BY ZALORA",
                            supplier = "ZALORA"
                        },
                        new
                        {
                            id = 7,
                            category = "dress_wrap",
                            description = "Floral printed shirt dress, Collared neckline, Lined, Regular fit, Waist tie fastening, Polyblend",
                            name = "Studio Short Sleeve Wrap Dress",
                            price = 1439,
                            summary = "SOLD BY ZALORA",
                            supplier = "ZALORA"
                        },
                        new
                        {
                            id = 8,
                            category = "dress_maxi",
                            description = "Frilled hem high necklined shift midi dress, High neckline, Unlined, Back button keyhole fastening, Sleeveless, Evening",
                            name = "Zia Midi Dress",
                            price = 1899,
                            summary = "SOLD BY ZALORA",
                            supplier = "Cole Vintag"
                        },
                        new
                        {
                            id = 9,
                            category = "dress_wrap",
                            description = "Printed mini dress with flute sleeves, V neckline, Unlined, Regular fit, Waist tie fastening,  Polyblend",
                            name = "Petite Monochrome Geometric Print Wrap Dress",
                            price = 3089,
                            summary = "SOLD BY ZALORA",
                            supplier = "Wallis"
                        },
                        new
                        {
                            id = 10,
                            category = "dress_maxi",
                            description = "Sheeny open back drape dress, Cowl neckline, Regular fit, Invisible back zipper fastening, Back self tie fastening, Polyester blend",
                            name = "Estelle Drape Dress",
                            price = 3249,
                            summary = "SOLD BY ZALORA",
                            supplier = "Bardot"
                        });
                });

            modelBuilder.Entity("WebApplication2.Models.ProductSize", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("product");

                    b.Property<string>("quantity");

                    b.Property<string>("size");

                    b.HasKey("id");

                    b.ToTable("ProductSize");

                    b.HasData(
                        new
                        {
                            id = 1,
                            product = 1,
                            quantity = "900",
                            size = "S"
                        },
                        new
                        {
                            id = 2,
                            product = 1,
                            quantity = "100",
                            size = "L"
                        },
                        new
                        {
                            id = 3,
                            product = 1,
                            quantity = "1000",
                            size = "One Size"
                        },
                        new
                        {
                            id = 4,
                            product = 10,
                            quantity = "50",
                            size = "S"
                        },
                        new
                        {
                            id = 5,
                            product = 2,
                            quantity = "2000",
                            size = "M"
                        },
                        new
                        {
                            id = 6,
                            product = 2,
                            quantity = "1000",
                            size = "2XL"
                        },
                        new
                        {
                            id = 7,
                            product = 2,
                            quantity = "500",
                            size = "L"
                        },
                        new
                        {
                            id = 8,
                            product = 3,
                            quantity = "800",
                            size = "2XL"
                        },
                        new
                        {
                            id = 9,
                            product = 3,
                            quantity = "600",
                            size = "XL"
                        },
                        new
                        {
                            id = 10,
                            product = 3,
                            quantity = "100",
                            size = "S"
                        },
                        new
                        {
                            id = 11,
                            product = 4,
                            quantity = "50",
                            size = "XL"
                        },
                        new
                        {
                            id = 12,
                            product = 4,
                            quantity = "800",
                            size = "2XL"
                        },
                        new
                        {
                            id = 13,
                            product = 4,
                            quantity = "150",
                            size = "2XL"
                        },
                        new
                        {
                            id = 14,
                            product = 5,
                            quantity = "60",
                            size = "S"
                        },
                        new
                        {
                            id = 15,
                            product = 5,
                            quantity = "400",
                            size = "L"
                        },
                        new
                        {
                            id = 16,
                            product = 5,
                            quantity = "900",
                            size = "XL"
                        },
                        new
                        {
                            id = 17,
                            product = 6,
                            quantity = "150",
                            size = "2XL"
                        },
                        new
                        {
                            id = 18,
                            product = 6,
                            quantity = "50",
                            size = "S"
                        },
                        new
                        {
                            id = 19,
                            product = 6,
                            quantity = "50",
                            size = "M"
                        },
                        new
                        {
                            id = 20,
                            product = 7,
                            quantity = "150",
                            size = "2XL"
                        },
                        new
                        {
                            id = 21,
                            product = 7,
                            quantity = "200",
                            size = "XL"
                        },
                        new
                        {
                            id = 22,
                            product = 7,
                            quantity = "1000",
                            size = "One Size"
                        },
                        new
                        {
                            id = 23,
                            product = 8,
                            quantity = "80",
                            size = "L"
                        },
                        new
                        {
                            id = 24,
                            product = 8,
                            quantity = "400",
                            size = "XL"
                        },
                        new
                        {
                            id = 25,
                            product = 8,
                            quantity = "50",
                            size = "2XL"
                        },
                        new
                        {
                            id = 26,
                            product = 9,
                            quantity = "300",
                            size = "M"
                        },
                        new
                        {
                            id = 27,
                            product = 9,
                            quantity = "500",
                            size = "S"
                        },
                        new
                        {
                            id = 28,
                            product = 10,
                            quantity = "400",
                            size = "S"
                        },
                        new
                        {
                            id = 29,
                            product = 10,
                            quantity = "400",
                            size = "M"
                        },
                        new
                        {
                            id = 30,
                            product = 10,
                            quantity = "50",
                            size = "L"
                        });
                });

            modelBuilder.Entity("WebApplication2.Models.Promotion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("admin");

                    b.Property<string>("by");

                    b.Property<DateTime>("created");

                    b.Property<string>("description");

                    b.Property<float>("discount");

                    b.Property<DateTime>("due");

                    b.HasKey("id");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("WebApplication2.Models.ShoppingCart", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created");

                    b.Property<int>("customer");

                    b.Property<DateTime>("discard");

                    b.HasKey("id");

                    b.ToTable("ShoppingCart");
                });
#pragma warning restore 612, 618
        }
    }
}
